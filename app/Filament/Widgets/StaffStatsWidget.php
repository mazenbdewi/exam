<?php

namespace App\Filament\Widgets;

use App\Models\RoomSchedule;
use Filament\Widgets\StatsOverviewWidget;
use Filament\Widgets\StatsOverviewWidget\Card;

class StaffStatsWidget extends StatsOverviewWidget
{
    protected function getCards(): array
    {
        $totalRequired = [
            'Ø±Ø¦ÙŠØ³' => 0,
            'Ø£Ù…ÙŠÙ† Ø³Ø±' => 0,
            'Ù…Ø±Ø§Ù‚Ø¨' => 0,
        ];

        $totalCurrent = [
            'Ø±Ø¦ÙŠØ³' => 0,
            'Ø£Ù…ÙŠÙ† Ø³Ø±' => 0,
            'Ù…Ø±Ø§Ù‚Ø¨' => 0,
        ];

        $schedules = RoomSchedule::with('room')
            ->withCount([
                'roomObservers as president_count' => fn ($q) => $q->whereHas('user.roles', fn ($q) => $q->where('name', 'Ø±Ø¦ÙŠØ³_Ù‚Ø§Ø¹Ø©')),
                'roomObservers as secretary_count' => fn ($q) => $q->whereHas('user.roles', fn ($q) => $q->where('name', 'Ø§Ù…ÙŠÙ†_Ø³Ø±')),
                'roomObservers as observer_count' => fn ($q) => $q->whereHas('user.roles', fn ($q) => $q->where('name', 'Ù…Ø±Ø§Ù‚Ø¨')),
            ])
            ->get();

        foreach ($schedules as $record) {
            $roomType = $record->room->room_type;

            $required = [
                'Ø±Ø¦ÙŠØ³' => 1,
                'Ø£Ù…ÙŠÙ† Ø³Ø±' => $roomType === 'big' ? 2 : 1,
                'Ù…Ø±Ø§Ù‚Ø¨' => $roomType === 'big' ? 8 : 4,
            ];

            $totalRequired['Ø±Ø¦ÙŠØ³'] += $required['Ø±Ø¦ÙŠØ³'];
            $totalRequired['Ø£Ù…ÙŠÙ† Ø³Ø±'] += $required['Ø£Ù…ÙŠÙ† Ø³Ø±'];
            $totalRequired['Ù…Ø±Ø§Ù‚Ø¨'] += $required['Ù…Ø±Ø§Ù‚Ø¨'];

            $totalCurrent['Ø±Ø¦ÙŠØ³'] += $record->president_count;
            $totalCurrent['Ø£Ù…ÙŠÙ† Ø³Ø±'] += $record->secretary_count;
            $totalCurrent['Ù…Ø±Ø§Ù‚Ø¨'] += $record->observer_count;
        }

        return [
            $this->buildCard('Ø±Ø¤Ø³Ø§Ø¡ Ø§Ù„Ù‚Ø§Ø¹Ø§Øª', $totalCurrent['Ø±Ø¦ÙŠØ³'], $totalRequired['Ø±Ø¦ÙŠØ³']),
            $this->buildCard('Ø£Ù…Ù†Ø§Ø¡ Ø§Ù„Ø³Ø±', $totalCurrent['Ø£Ù…ÙŠÙ† Ø³Ø±'], $totalRequired['Ø£Ù…ÙŠÙ† Ø³Ø±']),
            $this->buildCard('Ø§Ù„Ù…Ø±Ø§Ù‚Ø¨ÙŠÙ†', $totalCurrent['Ù…Ø±Ø§Ù‚Ø¨'], $totalRequired['Ù…Ø±Ø§Ù‚Ø¨']),
        ];
    }

    private function buildCard(string $label, int $current, int $required): Card
    {
        $diff = $current - $required;

        if ($diff > 0) {
            $suffix = ' ðŸ”º Ø²ÙŠØ§Ø¯Ø©: '.$diff;
            $color = 'success';
            $icon = 'heroicon-o-arrow-trending-up';
        } elseif ($diff < 0) {
            $suffix = ' ðŸ”» Ù†Ù‚Øµ: '.abs($diff);
            $color = 'danger';
            $icon = 'heroicon-o-arrow-trending-down';
        } else {
            $suffix = ' âœ… Ù…ÙƒØªÙ…Ù„';
            $color = 'primary';
            $icon = 'heroicon-o-check-circle';
        }

        return Card::make($label, "{$current} Ù…Ù† {$required} {$suffix}")
            ->color($color)
            ->icon($icon);
    }
}
